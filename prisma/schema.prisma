datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(USER)
  accounts      Account[]
  Comments      Comments[]

  bookmarkedBlogIds String[] @db.ObjectId
  bookmarkedBlogs   Blog[]   @relation("UserBookmarksBlog", fields: [bookmarkedBlogIds], references: [id])

  likedBlogIds String[] @db.ObjectId
  likedBlogs   Blog[]   @relation("UserLikesBlog", fields: [likedBlogIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum BlogStatus {
  backlog
  todo
  writing
  published
  draft
  cancelled
}

enum Priority {
  low
  medium
  high
}

model Blog {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  coverImageName String
  title          String
  content        Json
  slug           String     @unique
  status         BlogStatus @default(draft)
  priority       Priority   @default(low)
  likes          Int        @default(0)
  bookmarks      Int        @default(0)
  views          Int        @default(0)
  Comments       Comments[]
  tagIds         String[]   @db.ObjectId
  tags           Tags[]     @relation(fields: [tagIds], references: [id])

  bookmarkedByIds String[] @db.ObjectId
  bookmarkedBy    User[]   @relation("UserBookmarksBlog", fields: [bookmarkedByIds], references: [id])

  likedByIds String[] @db.ObjectId
  likedBy    User[]   @relation("UserLikesBlog", fields: [likedByIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tags {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  label   String   @unique
  value   String   @unique
  blogIds String[] @db.ObjectId
  Blog    Blog[]   @relation(fields: [blogIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?  @db.ObjectId
}
