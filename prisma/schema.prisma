datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  savedBlogs    Blog[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Comments  Comments[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum BlogStatus {
  Backlog
  Todo
  Writing
  Published
  Draft
  Cancelled
}

model Blog {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  coverImage String
  title      String
  content    Json
  slug       String     @unique
  status     BlogStatus @default(Draft)
  tags       Tags[]
  likes      Int        @default(0)
  views      Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User?      @relation(fields: [userId], references: [id])
  userId     String?    @db.ObjectId
  Comments   Comments[]
}

model Tags {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?  @db.ObjectId
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?  @db.ObjectId
}
